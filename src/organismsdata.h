/***************************\
*                           *
*    organismsdata class    *
*                           *
\***************************/

/*

    (c) Copyright 2006-2008 by Simon Joly

    This file is part of Pofad.

    Pofad is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Pofad is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

*/

#ifndef _ORGANISMSDATA_CLASS_DEFINED_

#include <string>
#include <iostream>
#include <vector>
#include <math.h>
#include <algorithm>
#include "information.h"
#include "GenFunctions.h"
#include "nexusdata.h"

using namespace std;

extern information info_data;
extern nexusdata nexus_data;
extern int get_position_nexus(string);


const static string Characters[31]={"A","C","T","G","R","Y","K","M","S","W","B","D","H","V","N","-","a","c","t","g","r","y","k","m","s","w","b","d","h","v","n"};

const static double DistGenpofad[31][31]= { \
		/*		A		C		T		G		R		Y		K		M		S		W		B		D	H	V	N	-	a	c	t	g	r	y	k	m	s	w	b	d	h	v	n */
		/*A*/	{0,		1,		1,		1,		0.5,	1,		1,		0.5,	1,		0.5,	1,		(2./3),	(2./3),	(2./3),	0.75,	1,	0.5,	1,	1,	1,	(2./3),	1,	1,	(2./3),	1,	(2./3),	1,	0.75,	0.75,	0.75,	(4./5)}, \
		/*C*/	{1,		0,		1,		1,		1,		0.5,	1,		0.5,	0.5,	1,		(2./3),	1,		(2./3),	(2./3),	0.75,	1,	1,	0.5,	1,	1,	1,	(2./3),	1,	(2./3),	(2./3),	1,	0.75,	1,	0.75,	0.75,	(4./5)}, \
		/*T*/	{1,		1,		0,		1,		1,		0.5,	0.5,	1,		1,		0.5,	(2./3),	(2./3),	(2./3),	1,	0.75,	1,	1,	1,	0.5,	1,	1,	(2./3),	(2./3),	1,	1,	(2./3),	0.75,	0.75,	0.75,	1,	(4./5)}, \
		/*G*/	{1,		1,		1,		0,		0.5,	1,		0.5,	1,		0.5,	1,		(2./3),	(2./3),	1,	(2./3),	0.75,	1,	1,	1,	1,	0.5,	(2./3),	1,	(2./3),	1,	(2./3),	1,	0.75,	0.75,	1,	0.75,	(4./5)}, \
		/*R*/	{0.5,	1,		1,		0.5,	0,		1,		0.5,	0.5,	0.5,	0.5,	(2./3),	(1./3),	(2./3),	(1./3),	0.5,	1,	(2./3),	1,	1,	(2./3),	(1./3),	1,	(2./3),	(2./3),	(2./3),	(2./3),	0.75,	0.5,	0.75,	0.5,	(3./5)}, \
		/*Y*/	{1,		0.5,	0.5,	1,		1,		0,		0.5,	0.5,	0.5,	0.5,	(1./3),	(2./3),	(1./3),	(2./3),	0.5,	1,	1,	(2./3),	(2./3),	1,	1,	(1./3),	(2./3),	(2./3),	(2./3),	(2./3),	0.5,	0.75,	0.5,	0.75,	(3./5)}, \
		/*K*/	{1,		1,		0.5,	0.5,	0.5,	0.5,	0,		1,		0.5,	0.5,	(1./3),	(1./3),	(2./3),	(2./3),	0.5,	1,	1,	1,	(2./3),	(2./3),	(2./3),	(2./3),	(1./3),	1,	(2./3),	(2./3),	0.5,	0.5,	0.75,	0.75,	(3./5)}, \
		/*M*/	{0.5,	0.5,	1,		1,		0.5,	0.5,	1,		0,		0.5,	0.5,	(2./3),	(2./3),	(1./3),	(1./3),	0.5,	1,	(2./3),	(2./3),	1,	1,	(2./3),	(2./3),	1,	(1./3),	(2./3),	(2./3),	0.75,	0.75,	0.5,	0.5,	(3./5)}, \
		/*S*/	{1,		0.5,	1,		0.5,	0.5,	0.5,	0.5,	0.5,	0,		1,		(1./3),	(2./3),	(2./3),	(1./3),	0.5,	1,	1,	(2./3),	1,	(2./3),	(2./3),	(2./3),	(2./3),	(2./3),	(1./3),	1,	0.5,	0.75,	0.75,	0.5,	(3./5)}, \
		/*W*/	{0.5,	1,		0.5,	1,	0.5,	0.5,	0.5,	0.5,	1,	0,	(2./3),	(1./3),	(1./3),	(2./3),	0.5,	1,	(2./3),	1,	(2./3),	1,	(2./3),	(2./3),	(2./3),	(2./3),	1,	(1./3),	0.75,	0.5,	0.5,	0.75,	(3./5)}, \
		/*B*/	{1,		(2./3),	(2./3),	(2./3),	(2./3),	(1./3),	(1./3),	(2./3),	(1./3),	(2./3),	0,	(1./3),	(1./3),	(1./3),	0.25,	1,	1,	0.75,	0.75,	0.75,	0.75,	0.5,	0.5,	0.75,	0.5,	0.75,	0.25,	0.5,	0.5,	0.5,	(2./5)}, \
		/*D*/	{(2./3),	1,		(2./3),	(2./3),	(1./3),	(2./3),	(1./3),	(2./3),	(2./3),	(1./3),	(1./3),	0,	(1./3),	(1./3),	0.25,	1,	0.75,	1,	0.75,	0.75,	0.5,	0.75,	0.5,	0.75,	0.75,	0.5,	0.5,	0.25,	0.5,	0.5,	(2./5)}, \
		/*H*/	{(2./3),	(2./3),	(2./3),	1,	(2./3),	(1./3),	(2./3),	(1./3),	(2./3),	(1./3),	(1./3),	(1./3),	0,	(1./3),	0.25,	1,	0.75,	0.75,	0.75,	1,	0.75,	0.5,	0.75,	0.5,	0.75,	0.5,	0.5,	0.5,	0.25,	0.5,	(2./5)}, \
		/*V*/	{(2./3),	(2./3),	1,		(2./3),	(1./3),	(2./3),	(2./3),	(1./3),	(1./3),	(2./3),	(1./3),	(1./3),	(1./3),	0,	0.25,	1,	0.75,	0.75,	1,	0.75,	0.5,	0.75,	0.75,	0.5,	0.5,	0.75,	0.5,	0.5,	0.5,	0.25,	(2./5)}, \
		/*N*/	{0.75,	0.75,	0.75,	0.75,	0.5,	0.5,	0.5,	0.5,	0.5,	0.5,	0.25,	0.25,	0.25,	0.25,	0,	1,	(4./5),	(4./5),	(4./5),	(4./5),	(3./5),	(3./5),	(3./5),	(3./5),	(3./5),	(3./5),	(2./5),	(2./5),	(2./5),	(2./5),	(1./5)}, \
		/*-*/	{1,		1,		1,		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0.5,	0.5,	0.5,	0.5,	(2./3),	(2./3),	(2./3),	(2./3),	(2./3),	(2./3),	0.75,	0.75,	0.75,	0.75,	(4./5)}, \
		/*a*/	{0.5,	1,		1,		1,	(2./3),	1,	1,	(2./3),	1,	(2./3),	1,	0.75,	0.75,	0.75,	(4./5),	0.5,	0,	0.5,	0.5,	0.5,	(1./3),	(2./3),	(2./3),	(1./3),	(2./3),	(1./3),	0.75,	0.5,	0.5,	0.5,	(3./5)}, \
		/*c*/	{1,		0.5,	1,		1,	1,	(2./3),	1,	(2./3),	(2./3),	1,	0.75,	1,	0.75,	0.75,	(4./5),	0.5,	0.5,	0,	0.5,	0.5,	(2./3),	(1./3),	(2./3),	(1./3),	(1./3),	(2./3),	0.5,	0.75,	0.5,	0.5,	(3./5)}, \
		/*t*/	{1,		1,		0.5,	1,	1,	(2./3),	(2./3),	1,	1,	(2./3),	0.75,	0.75,	0.75,	1,	(4./5),	0.5,	0.5,	0.5,	0,	0.5,	(2./3),	(1./3),	(1./3),	(2./3),	(2./3),	(1./3),	0.5,	0.5,	0.5,	0.75,	(3./5)}, \
		/*g*/	{1,		1,		1,	0.5,	(2./3),	1,	(2./3),	1,	(2./3),	1,	0.75,	0.75,	1,	0.75,	(4./5),	0.5,	0.5,	0.5,	0.5,	0,	(1./3),	(2./3),	(1./3),	(2./3),	(1./3),	(2./3),	0.5,	0.5,	0.75,	0.5,	(3./5)}, \
		/*r*/	{(2./3),	1,		1,	(2./3),	(1./3),	1,	(2./3),	(2./3),	(2./3),	(2./3),	0.75,	0.5,	0.75,	0.5,	(3./5),	(2./3),	(1./3),	(2./3),	(2./3),	(1./3),	0,	(2./3),	(1./3),	(1./3),	(1./3),	(1./3),	0.5,	0.25,	0.5,	0.25,	(2./5)}, \
		/*y*/	{1,		(2./3),	(2./3),	1,	1,	(1./3),	(2./3),	(2./3),	(2./3),	(2./3),	0.5,	0.75,	0.5,	0.75,	(3./5),	(2./3),	(2./3),	(1./3),	(1./3),	(2./3),	(2./3),	0,	(1./3),	(1./3),	(1./3),	(1./3),	0.25,	0.5,	0.25,	0.5,	(2./5)}, \
		/*k*/	{1,		1,		(2./3),	(2./3),	(2./3),	(2./3),	(1./3),	1,	(2./3),	(2./3),	0.5,	0.5,	0.75,	0.75,	(3./5),	(2./3),	(2./3),	(2./3),	(1./3),	(1./3),	(1./3),	(1./3),	0,	(2./3),	(1./3),	(1./3),	0.25,	0.25,	0.5,	0.5,	(2./5)}, \
		/*m*/	{(2./3),	(2./3),	1,	1,	(2./3),	(2./3),	1,	(1./3),	(2./3),	(2./3),	0.75,	0.75,	0.5,	0.5,	(3./5),	(2./3),	(1./3),	(1./3),	(2./3),	(2./3),	(1./3),	(1./3),	(2./3),	0,	(1./3),	(1./3),	0.5,	0.5,	0.25,	0.25,	(2./5)}, \
		/*s*/	{1,		(2./3),	1,	(2./3),	(2./3),	(2./3),	(2./3),	(2./3),	(1./3),	1,	0.5,	0.75,	0.75,	0.5,	(3./5),	(2./3),	(2./3),	(1./3),	(2./3),	(1./3),	(1./3),	(1./3),	(1./3),	(1./3),	0,	(2./3),	0.25,	0.5,	0.5,	0.25,	(2./5)}, \
		/*w*/	{(2./3),	1,		(2./3),	1,	(2./3),	(2./3),	(2./3),	(2./3),	1,	(1./3),	0.75,	0.5,	0.5,	0.75,	(3./5),	(2./3),	(1./3),	(2./3),	(1./3),	(2./3),	(1./3),	(1./3),	(1./3),	(1./3),	(2./3),	0,	0.5,	0.25,	0.25,	0.5,	(2./5)}, \
		/*b*/	{1,		0.75,	0.75,	0.75,	0.75,	0.5,		0.5,		0.75,	0.5,	0.75,	0.25,	0.5,	0.5,	0.5,	(2./5),	0.75,	0.75,	0.5,	0.5,	0.5,	0.5,	0.25,	0.25,	0.5,	0.25,	0.5,	0,	0.25,	0.25,	0.25,	(1./5)}, \
		/*d*/	{0.75,	1,		0.75,	0.75,	0.5,	0.75,	0.5,		0.75,	0.75,	0.5,	0.5,	0.25,	0.5,	0.5,	(2./5),	0.75,	0.5,	0.75,	0.5,	0.5,	0.25,	0.5,	0.25,	0.5,	0.5,	0.25,	0.25,	0,	0.25,	0.25,	(1./5)}, \
		/*h*/	{0.75,	0.75,	0.75,	1,		0.75,	0.5,		0.75,	0.5,	0.75,	0.5,	0.5,	0.5,	0.25,	0.5,	(2./5),	0.75,	0.5,	0.5,	0.5,	0.75,	0.5,	0.25,	0.5,	0.25,	0.5,	0.25,	0.25,	0.25,	0,	0.25,	(1./5)}, \
		/*v*/	{0.75,	0.75,	1,		0.75,	0.5,		0.75,	0.75,	0.5,	0.5,	0.75,	0.5,	0.5,	0.5,	0.25,	(2./5),	0.75,	0.5,	0.5,	0.75,	0.5,	0.25,	0.5,	0.5,	0.25,	0.25,	0.5,	0.25,	0.25,	0.25,	0,	(1./5)}, \
		/*n*/	{(4./5),	(4./5),	(4./5),	(4./5),	(3./5),	(3./5),	(3./5),	(3./5),	(3./5),	(3./5),	(2./5),	(2./5),	(2./5),	(2./5),	(1./5),	(4./5),	(3./5),	(3./5),	(3./5),	(3./5),	(2./5),	(2./5),	(2./5),	(2./5),	(2./5),	(2./5),	(1./5),	(1./5),	(1./5),	(1./5),	0} \
		};

const static double DistMatchstates[31][31]= { \
		/*		A		C		T		G		R		Y		K		M		S		W		B		D	H	V	N	-	a	c	t	g	r	y	k	m	s	w	b	d	h	v	n */
		/*A*/	{0,	1,	1,	1,	(1./3),	1,	1,	(1./3),	1,	(1./3),	1,	0.5,	0.5,	0.5,	(3./5),	1,	(1./3),	1,	1,	1,	0.5,	1,	1,	0.5,	1,	0.5,	1,	(3./5),	(3./5),	(3./5),	(2./3)},
		/*C*/	{1,	0,	1,	1,	1,	(1./3),	1,	(1./3),	(1./3),	1,	0.5,	1,	0.5,	0.5,	(3./5),	1,	1,	(1./3),	1,	1,	1,	0.5,	1,	0.5,	0.5,	1,	(3./5),	1,	(3./5),	(3./5),	(2./3)},
		/*T*/	{1,	1,	0,	1,	1,	(1./3),	(1./3),	1,	1,	(1./3),	0.5,	0.5,	0.5,	1,	(3./5),	1,	1,	1,	(1./3),	1,	1,	0.5,	0.5,	1,	1,	0.5,	(3./5),	(3./5),	(3./5),	1,	(2./3)},
		/*G*/	{1,	1,	1,	0,	(1./3),	1,	(1./3),	1,	(1./3),	1,	0.5,	0.5,	1,	0.5,	(3./5),	1,	1,	1,	1,	(1./3),	0.5,	1,	0.5,	1,	0.5,	1,	(3./5),	(3./5),	1,	(3./5),	(2./3)},
		/*R*/	{(1./3),	1,	1,	(1./3),	0,	1,	0.5,	0.5,	0.5,	0.5,	(3./5),	(1./5),	(3./5),	(1./5),	(1./3),	1,	0.5,	1,	1,	0.5,	(1./5),	1,	(3./5),	(3./5),	(3./5),	(3./5),	(2./3),	(1./3),	(2./3),	(1./3),	(3./7)},
		/*Y*/	{1,	(1./3),	(1./3),	1,	1,	0,	0.5,	0.5,	0.5,	0.5,	(1./5),	(3./5),	(1./5),	(3./5),	(1./3),	1,	1,	0.5,	0.5,	1,	1,	(1./5),	(3./5),	(3./5),	(3./5),	(3./5),	(1./3),	(2./3),	(1./3),	(2./3),	(3./7)},
		/*K*/	{1,	1,	(1./3),	(1./3),	0.5,	0.5,	0,	1,	0.5,	0.5,	(1./5),	(1./5),	(3./5),	(3./5),	(1./3),	1,	1,	1,	0.5,	0.5,	(3./5),	(3./5),	(1./5),	1,	(3./5),	(3./5),	(1./3),	(1./3),	(2./3),	(2./3),	(3./7)},
		/*M*/	{(1./3),	(1./3),	1,	1,	0.5,	0.5,	1,	0,	0.5,	0.5,	(3./5),	(3./5),	(1./5),	(1./5),	(1./3),	1,	0.5,	0.5,	1,	1,	(3./5),	(3./5),	1,	(1./5),	(3./5),	(3./5),	(2./3),	(2./3),	(1./3),	(1./3),	(3./7)},
		/*S*/	{1,	(1./3),	1,	(1./3),	0.5,	0.5,	0.5,	0.5,	0,	1,	(1./5),	(3./5),	(3./5),	(1./5),	(1./3),	1,	1,	0.5,	1,	0.5,	(3./5),	(3./5),	(3./5),	(3./5),	(1./5),	1,	(1./3),	(2./3),	(2./3),	(1./3),	(3./7)},
		/*W*/	{(1./3),	1,	(1./3),	1,	0.5,	0.5,	0.5,	0.5,	1,	0,	(3./5),	(1./5),	(1./5),	(3./5),	(1./3),	1,	0.5,	1,	0.5,	1,	(3./5),	(3./5),	(3./5),	(3./5),	1,	(1./5),	(2./3),	(1./3),	(1./3),	(2./3),	(3./7)},
		/*B*/	{1,	0.5,	0.5,	0.5,	(3./5),	(1./5),	(1./5),	(3./5),	(1./5),	(3./5),	0,	(1./3),	(1./3),	(1./3),	(1./7),	1,	1,	(3./5),	(3./5),	(3./5),	(2./3),	(1./3),	(1./3),	(2./3),	(1./3),	(2./3),	(1./7),	(3./7),	(3./7),	(3./7),	(1./4)},
		/*D*/	{0.5,	1,	0.5,	0.5,	(1./5),	(3./5),	(1./5),	(3./5),	(3./5),	(1./5),	(1./3),	0,	(1./3),	(1./3),	(1./7),	1,	(3./5),	1,	(3./5),	(3./5),	(1./3),	(2./3),	(1./3),	(2./3),	(2./3),	(1./3),	(3./7),	(1./7),	(3./7),	(3./7),	(1./4)},
		/*H*/	{0.5,	0.5,	0.5,	1,	(3./5),	(1./5),	(3./5),	(1./5),	(3./5),	(1./5),	(1./3),	(1./3),	0,	(1./3),	(1./7),	1,	(3./5),	(3./5),	(3./5),	1,	(2./3),	(1./3),	(2./3),	(1./3),	(2./3),	(1./3),	(3./7),	(3./7),	(1./7),	(3./7),	(1./4)},
		/*V*/	{0.5,	0.5,	1,	0.5,	(1./5),	(3./5),	(3./5),	(1./5),	(1./5),	(3./5),	(1./3),	(1./3),	(1./3),	0,	(1./7),	1,	(3./5),	(3./5),	1,	(3./5),	(1./3),	(2./3),	(2./3),	(1./3),	(1./3),	(2./3),	(3./7),	(3./7),	(3./7),	(1./7),	(1./4)},
		/*N*/	{(3./5),	(3./5),	(3./5),	(3./5),	(1./3),	(1./3),	(1./3),	(1./3),	(1./3),	(1./3),	(1./7),	(1./7),	(1./7),	(1./7),	0,	1,	(2./3),	(2./3),	(2./3),	(2./3),	(3./7),	(3./7),	(3./7),	(3./7),	(3./7),	(3./7),	0.5,	0.5,	0.5,	0.5,	(1./9)},
		/*-*/	{1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	0,	(1./3),	(1./3),	(1./3),	(1./3),	0.5,	0.5,	0.5,	0.5,	0.5,	0.5,	(3./5),	(3./5),	(3./5),	(3./5),	(2./3)},
		/*a*/	{(1./3),	1,	1,	1,	0.5,	1,	1,	0.5,	1,	0.5,	1,	(3./5),	(3./5),	(3./5),	(2./3),	(1./3),	0,	0.5,	0.5,	0.5,	(1./5),	(3./5),	(3./5),	(1./5),	(3./5),	(1./5),	(2./3),	(1./3),	(1./3),	(1./3),	(3./7)},
		/*c*/	{1,	(1./3),	1,	1,	1,	0.5,	1,	0.5,	0.5,	1,	(3./5),	1,	(3./5),	(3./5),	(2./3),	(1./3),	0.5,	0,	0.5,	0.5,	(3./5),	(1./5),	(3./5),	(1./5),	(1./5),	(3./5),	(1./3),	(2./3),	(1./3),	(1./3),	(3./7)},
		/*t*/	{1,	1,	(1./3),	1,	1,	0.5,	0.5,	1,	1,	0.5,	(3./5),	(3./5),	(3./5),	1,	(2./3),	(1./3),	0.5,	0.5,	0,	0.5,	(3./5),	(1./5),	(1./5),	(3./5),	(3./5),	(1./5),	(1./3),	(1./3),	(1./3),	(2./3),	(3./7)},
		/*g*/	{1,	1,	1,	(1./3),	0.5,	1,	0.5,	1,	0.5,	1,	(3./5),	(3./5),	1,	(3./5),	(2./3),	(1./3),	0.5,	0.5,	0.5,	0,	(1./5),	(3./5),	(1./5),	(3./5),	(1./5),	(3./5),	(1./3),	(1./3),	(2./3),	(1./3),	(3./7)},
		/*r*/	{0.5,	1,	1,	0.5,	(1./5),	1,	(3./5),	(3./5),	(3./5),	(3./5),	(2./3),	(1./3),	(2./3),	(1./3),	(3./7),	0.5,	(1./5),	(3./5),	(3./5),	(1./5),	0,	(2./3),	(1./3),	(1./3),	(1./3),	(1./3),	(3./7),	(1./7),	(3./7),	(1./7),	(1./4)},
		/*y*/	{1,	0.5,	0.5,	1,	1,	(1./5),	(3./5),	(3./5),	(3./5),	(3./5),	(1./3),	(2./3),	(1./3),	(2./3),	(3./7),	0.5,	(3./5),	(1./5),	(1./5),	(3./5),	(2./3),	0,	(1./3),	(1./3),	(1./3),	(1./3),	(1./7),	(3./7),	(1./7),	(3./7),	(1./4)},
		/*k*/	{1,	1,	0.5,	0.5,	(3./5),	(3./5),	(1./5),	1,	(3./5),	(3./5),	(1./3),	(1./3),	(2./3),	(2./3),	(3./7),	0.5,	(3./5),	(3./5),	(1./5),	(1./5),	(1./3),	(1./3),	0,	(2./3),	(1./3),	(1./3),	(1./7),	(1./7),	(3./7),	(3./7),	(1./4)},
		/*m*/	{0.5,	0.5,	1,	1,	(3./5),	(3./5),	1,	(1./5),	(3./5),	(3./5),	(2./3),	(2./3),	(1./3),	(1./3),	(3./7),	0.5,	(1./5),	(1./5),	(3./5),	(3./5),	(1./3),	(1./3),	(2./3),	0,	(1./3),	(1./3),	(3./7),	(3./7),	(1./7),	(1./7),	(1./4)},
		/*s*/	{1,	0.5,	1,	0.5,	(3./5),	(3./5),	(3./5),	(3./5),	(1./5),	1,	(1./3),	(2./3),	(2./3),	(1./3),	(3./7),	0.5,	(3./5),	(1./5),	(3./5),	(1./5),	(1./3),	(1./3),	(1./3),	(1./3),	0,	(2./3),	(1./7),	(3./7),	(3./7),	(1./7),	(1./4)},
		/*w*/	{0.5,	1,	0.5,	1,	(3./5),	(3./5),	(3./5),	(3./5),	1,	(1./5),	(2./3),	(1./3),	(1./3),	(2./3),	(3./7),	0.5,	(1./5),	(3./5),	(1./5),	(3./5),	(1./3),	(1./3),	(1./3),	(1./3),	(2./3),	0,	(3./7),	(1./7),	(1./7),	(3./7),	(1./4)},
		/*b*/	{1,	(3./5),	(3./5),	(3./5),	(2./3),	(1./3),	(1./3),	(2./3),	(1./3),	(2./3),	(1./7),	(3./7),	(3./7),	(3./7),	0.5,	(3./5),	(2./3),	(1./3),	(1./3),	(1./3),	(3./7),	(1./7),	(1./7),	(3./7),	(1./7),	(3./7),	0,	0.25,	0.25,	0.25,	(1./9)},
		/*d*/	{(3./5),	1,	(3./5),	(3./5),	(1./3),	(2./3),	(1./3),	(2./3),	(2./3),	(1./3),	(3./7),	(1./7),	(3./7),	(3./7),	0.5,	(3./5),	(1./3),	(2./3),	(1./3),	(1./3),	(1./7),	(3./7),	(1./7),	(3./7),	(3./7),	(1./7),	0.25,	0,	0.25,	0.25,	(1./9)},
		/*h*/	{(3./5),	(3./5),	(3./5),	1,	(2./3),	(1./3),	(2./3),	(1./3),	(2./3),	(1./3),	(3./7),	(3./7),	(1./7),	(3./7),	0.5,	(3./5),	(1./3),	(1./3),	(1./3),	(2./3),	(3./7),	(1./7),	(3./7),	(1./7),	(3./7),	(1./7),	0.25,	0.25,	0,	0.25,	(1./9)},
		/*v*/	{(3./5),	(3./5),	1,	(3./5),	(1./3),	(2./3),	(2./3),	(1./3),	(1./3),	(2./3),	(3./7),	(3./7),	(3./7),	(1./7),	0.5,	(3./5),	(1./3),	(1./3),	(2./3),	(1./3),	(1./7),	(3./7),	(3./7),	(1./7),	(1./7),	(3./7),	0.25,	0.25,	0.25,	0,	(1./9)},
		/*n*/	{(2./3),	(2./3),	(2./3),	(2./3),	(3./7),	(3./7),	(3./7),	(3./7),	(3./7),	(3./7),	(1./4),	(1./4),	(1./4),	(1./4),	(1./9),	(2./3),	(3./7),	(3./7),	(3./7),	(3./7),	(1./4),	(1./4),	(1./4),	(1./4),	(1./4),	(1./4),	(1./9),	(1./9),	(1./9),	(1./9),	0}
		};

const static double DistMRCA[31][31]= { \
		/*		A	C	T	G	R	Y	K	M	S	W	B	D	H	V	N	-	a	c	t	g	r	y	k	m	s	w	b	d	h	v	n */
		/*A*/	{0,	1,	1,	1,	0,	1,	1,	0,	1,	0,	1,	0,	0,	0,	0,	1,	0,	1,	1,	1,	0,	1,	1,	0,	1,	0,	1,	0,	0,	0,	0},
		/*C*/	{1,	0,	1,	1,	1,	0,	1,	0,	0,	1,	0,	1,	0,	0,	0,	1,	1,	0,	1,	1,	1,	0,	1,	0,	0,	1,	0,	1,	0,	0,	0},
		/*T*/	{1,	1,	0,	1,	1,	0,	0,	1,	1,	0,	0,	0,	0,	1,	0,	1,	1,	1,	0,	1,	1,	0,	0,	1,	1,	0,	0,	0,	0,	1,	0},
		/*G*/	{1,	1,	1,	0,	0,	1,	0,	1,	0,	1,	0,	0,	1,	0,	0,	1,	1,	1,	1,	0,	0,	1,	0,	1,	0,	1,	0,	0,	1,	0,	0},
		/*R*/	{0,	1,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*Y*/	{1,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*K*/	{1,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0},
		/*M*/	{0,	0,	1,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	1,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0},
		/*S*/	{1,	0,	1,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	1,	1,	0,	1,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0},
		/*W*/	{0,	1,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	1,	0,	1,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0},
		/*B*/	{1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*D*/	{0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*H*/	{0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*V*/	{0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*N*/	{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*-*/		{1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*a*/	{0,	1,	1,	1,	0,	1,	1,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*c*/	{1,	0,	1,	1,	1,	0,	1,	0,	0,	1,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*t*/		{1,	1,	0,	1,	1,	0,	0,	1,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*g*/	{1,	1,	1,	0,	0,	1,	0,	1,	0,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*r*/		{0,	1,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*y*/	{1,	0,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*k*/	{1,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*m*/	{0,	0,	1,	1,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*s*/		{1,	0,	1,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*w*/	{0,	1,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*b*/	{1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*d*/	{0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*h*/	{0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*v*/	{0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
		/*n*/	{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0}
		};


const static double DistPP[16][16]= { \
    /*A*/ {0,1,1,1,0.5,1.5,1.5,0.5,1.5,0.5,2,1,1,1,1.5,0.5},
    /*C*/ {1,0,1,1,1.5,0.5,1.5,0.5,0.5,1.5,1,2,1,1,1.5,0.5},
    /*T*/ {1,1,0,1,1.5,0.5,0.5,1.5,1.5,0.5,1,1,1,2,1.5,0.5},
    /*G*/ {1,1,1,0,0.5,1.5,0.5,1.5,0.5,1.5,1,1,2,1,1.5,0.5},
    /*R*/ {0.5,1.5,1.5,0.5,0,2,1,1,1,1,1.5,1.5,1.5,1.5,2,1},
    /*Y*/ {1.5,0.5,0.5,1.5,2,0,1,1,1,1,1.5,1.5,1.5,1.5,2,1},
    /*K*/ {1.5,1.5,0.5,0.5,1,1,0,2,1,1,0.5,0.5,1.5,1.5,1,1},
    /*M*/ {0.5,0.5,1.5,1.5,1,1,2,0,1,1,1.5,1.5,0.5,0.5,1,1},
    /*S*/ {1.5,0.5,1.5,0.5,1,1,1,1,0,2,0.5,1.5,1.5,0.5,1,1},
    /*W*/ {0.5,1.5,0.5,1.5,1,1,1,1,2,0,1.5,0.5,0.5,1.5,1,1},
    /*B*/ {2,1,1,1,1.5,1.5,0.5,1.5,0.5,1.5,0,1,2,1,0.5,1.5},
    /*D*/ {1,2,1,1,1.5,1.5,0.5,1.5,1.5,0.5,1,0,1,2,0.5,1.5},
    /*H*/ {1,1,1,2,1.5,1.5,1.5,0.5,1.5,0.5,2,1,0,1,0.5,1.5},
    /*V*/ {1,1,2,1,1.5,1.5,1.5,0.5,0.5,1.5,1,2,1,0,0.5,1.5},
    /*N*/ {1.5,1.5,1.5,1.5,2,2,1,1,1,1,0.5,0.5,0.5,0.5,0,2},
    /*-*/ {0.5,0.5,0.5,0.5,1,1,1,1,1,1,1.5,1.5,1.5,1.5,2,0}
};

class organismsdata {

private:
    vector<string> Organisms;  // A vector containning the taxa's name
    bool IsOrganismsRead;          // A flag to whether the organisms are read or not
    string datatype;           // Indicate the dataype
    string missingchar;        // Character indicating the symbol for missing characters
    string gapchar;            // Character for gaps
    double **dist_matrix;      // The distance matrix
    string *char_matrix;       // The character matrix
    int ***FRQMatrix;
    double ***RelFRQMatrix;
    int NOrg;
    int NChar;
    int NumberOfAlleles;
    vector<bool> IsMissingOrg;
    vector< vector< string > > AllelesInOrganisms;

    //Private functions
    double getdistance(int i, int j, string method);
    double getpofaddist(string a, string b);
    double getmrcadist(string a,string b);
    double getmatchstatesdist(string a, string b);
    double getPPdist(string firstchar, string secondchar);

public:
    organismsdata();
    ~organismsdata();
    void InitializeMember();
    void DeleteCharMatrix();
    void DeleteFRQMatrix();
    void DeleteDistanceMatrix();
    void GetNOrg(int nb_taxa);
    int ReturnNOrg();
    void GetNChar(int nb_chars);
    int ReturnNChars();
    void ReadOrganism(string an_organism);
    string ReturnOrganism(int number);
    int NumberOrgLabels();
    void OrganismsRead();
    bool IsOrganisms();
    void MissingChar(string a_character);
    string ReturnMissingChar();
    void GetGapChar(string a_character);
    string ReturnGapChar();
    void InitDistMatrix();
    void IsTriangle(int a_number);
    int ReturnTriangle(void);
    void EnterDist(double distance, int i, int j);
    double ReturnDist(int i, int j);
    void GetDatatype(string the_datatype);
    string ReturnDatatype();
    void InitDataMatrix();
    void AddCharacter(int i, string characters);
    int ReturnCharacterForOrg(int i);
    int ReturnLengthofOrg(int i);
    char ReturnChar(int i, int j);                    //Returns character at position j+1 for Taxa[i]
    string ReturnSequence(int i);                     //Returns the sequence of Taxa[i]
    void CalculateDistances(string method);
    void InitFRQMatrix();
    void BuildFRQMatrix(void);
    int get_FRQ_char(int organism_nb, int position);
    void FRQMatrix_AddCharacter(int organism_nb, int position, char a_character);
    void InitializeAllelesInOrganisms(void);
    int AddAllele(string an_organism,string an_allele);
    bool IsOrgPresent(int an_org);
    int ReturnNbAllelesforOrganism(int an_org);
    string ReturnAlleleFromOrganism(int an_org, int an_allele);
};


#define _ORGANISMSDATA_CLASS_DEFINED_
#endif /* _ORGANISMSDATA_CLASS_DEFINED_ */
